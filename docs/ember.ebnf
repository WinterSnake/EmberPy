module: declaration*;

# Declarations
declaration: declaration_function | declaration_statement;
declaration_function: 'fn' IDENTIFIER '(' (parameter (',' parameter)*)? ')' ':' TYPE '{' declaration_statement* '}';
	parameter: TYPE IDENTIFIER
declaration_statement: declaration_variable | statement;
declaration_variable: TYPE variable (',' variable)* ';';
	variable: IDENTIFIER ('=' expression)?;

# Statements
statement: statement_block | statement_condition | statement_loop_do | statement_loop_for | statement_loop_while | statement_return | statement_expression;
statement_block: '{' declaration_statement* '}';
statement_condition: 'if' '(' expression ')' statement ('else' statement)?;
statement_loop_do: 'do' statement 'while' '(' expression ')' ';';
statement_loop_for: 'for' '(' (declaration_variable | statement_expression | ';') expression? ';' expression? ')' statement;
statement_loop_while: 'while' '(' expression ')' statement;
statement_return 'return' expression? ';';
statement_expression: expression ';';

# Expressions
expression: expression_binary ('=' expression)?;
expression_binary: expression_primary (BINARY_OPERATOR expression_binary)*;
expression_unary: UNARY_PREFIX_OPERATOR expression_unary | expression_primary postfix?;
	postfix_function_call: '(' (expression (',' expression)*)? ')';
expression_primary: IDENTIFIER | BOOLEAN | NUMBER | '(' expression ')';

# Symbols
BINARY_OPERATOR: '+' | '-' | '*' | '/' | '%' | '<' | '>' | '<=' | '>=' | '==' | '!=';
UNARY_PREFIX_OPERATOR: '-';

# Keywords
INTS: "int8" | "int16" | "int32" | "int64";
UINTS: "uint8" | "uint16" | "uint32" | "uint64";
BUILTIN_TYPE: "void" | "bool" | INTS | UINTS;
TYPE: BUILTIN_TYPE;

# Literals
BOOLEAN: "true" | "false";
