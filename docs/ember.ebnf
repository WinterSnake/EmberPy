module: declaration*;

# Declarations
declaration: declaration_function | declaration_statement;
declaration_function: 'fn' IDENTIFIER '(' (parameter (',' parameter)*)? ')' ':' TYPE '{' declaration_statement* '}';
	parameter: TYPE IDENTIFIER
declaration_statement: declaration_variable | statement;
declaration_variable: TYPE variable (',' variable)* ';';
	variable: IDENTIFIER ('=' expression)?;

# Statements
statement: statement_block
		 | statement_condition
		 | statement_loop_do
		 | statement_loop_for
		 | statement_loop_while
		 | statement_return
		 | statement_expression
		 ;
statement_block: '{' declaration_statement* '}';
statement_condition: 'if' '(' expression ')' statement ('else' statement)?;
statement_loop_do: 'do' statement 'while' '(' expression ')' ';';
statement_loop_for: 'for' '(' (declaration_variable | statement_expression | ';') expression? ';' expression? ')' statement;
statement_loop_while: 'while' '(' expression ')' statement;
statement_return 'return' expression? ';';
statement_expression: expression ';';

# Expressions
expression: expression_binary ('=' expression)?;
expression_binary: expression_binary ('==' | '!=') expression_binary
				 | expression_binary ('<' | '>' | '<=' | '>=') expression_binary
				 | expression_binary ('*' | '/' | '%') expression_binary
				 | expression_binary ('+' | '-') expression_binary
				 | expression_unary
				 ;
expression_unary: ('-' | '!') expression_unary
                | expression_call;
expression_call: expression_primary ('(' (expression (',' expression)*)? ')')*;
expression_primary: IDENTIFIER
                  | BOOLEAN
				  | NUMBER
				  | '(' expression ')';

# Keywords
TYPE_INT: "int8" | "int16" | "int32" | "int64";
TYPE_UINT: "uint8" | "uint16" | "uint32" | "uint64";
TYPE_PRIMITIVE: "void" | "bool" | TYPE_INT | TYPE_UINT;
TYPE: TYPE_PRIMITIVE;

# Literals
BOOLEAN: "true" | "false";
